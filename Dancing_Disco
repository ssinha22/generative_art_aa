canvaswidth = 400
canvasheight = 350
numberofcolumns = 40
numberofrows = 200
triangle_height = canvaswidth/numberofcolumns


function setup() {
      
  //random detail for the sphere
  detailX = Math.floor(random(5,25));
  detailY = Math.floor(random(5,25));
  
  //starting color
  deltaR = 200;
  deltaG = 200;
  deltaB = 200;
  
  //random rotation speed and direction
  ySpeed = (Math.floor(random(1000,2000)));
  posNeg = [-1,1];
  index = Math.floor(Math.random()*2);
  sign = posNeg[index];
  ySpeed *= sign;
  xSpeed = Math.floor(random(1000,2000));
  posNeg = [-1,1];
  index = Math.floor(Math.random()*2);
  sign = posNeg[index];
  xSpeed *= sign;
   
}

  
  

function draw() {
    createCanvas(canvaswidth, canvasheight, WEBGL);
  background(90, 120, 205);
    for(var i = 0;i<numberofcolumns;i++){
      for(var j = 0;j<numberofrows;j++){
        stroke(10)
        if(j<numberofrows/2){
        
      fill (225)    
          
      let point1X = i*triangle_height
      let point1Y = j*triangle_height
      let point2X = (i+1)*triangle_height
      let point2Y = j*triangle_height
      let point3X = i*triangle_height
      let point3Y = (j+1)*triangle_height
      let point4X = (i+1)*triangle_height
      let point4Y = (j+1)*triangle_height

triangle(point1X, point1Y, point2X, point2Y, point3X, point3Y)
triangle(point3X, point3Y, point2X, point2Y, point4X, point4Y)
          
        }
      }
    }    
  
  rotateY(millis() / ySpeed);
  rotateX(millis() / xSpeed);
  
  //random shifts in color
  deltaR += Math.floor(random(-4,5));
  deltaG += Math.floor(random(-4,5));
  deltaB += Math.floor(random(-4,5));
  
  fill(deltaR, deltaG, deltaB);
  //this is what causes the sphere to move erratically due to it's changing orientation
  translate(50, 50);
  sphere(40, detailX, detailY);
}    
